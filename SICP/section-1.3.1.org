#+HTML_HEAD: <link href="../css/solarized-dark.css" rel="stylesheet" />
#+OPTIONS: toc:1
#+HTML_LINK_HOME: ../../index.html
#+TITLE: SICP Section 1.3.1
2015-08-11
* Exercise 1.29
One of many functions in which I would now use ~let~ instead of internal ~defines~.
#+BEGIN_SRC racket -n
(define (simpsons-rule f a b n)
  (define h (/ (- b a) n))
  (define (inc k) (+ k 1))
  (define (y k) (f (+ a (* k h))))
  (define (term k)
    (* (cond ((or (= k 0) (= k n)) 1)
             ((even? k) 2)
             (else 4))
       (y k)))
  (* (sum term
          0
          inc
          n)
     (/ h 3)))
#+END_SRC
* Exercise 1.31
** Part A
Write a procedure analogous to ~sum~ called ~product~. 
#+BEGIN_SRC racket -n
(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term
                  (next a)
                  next
                  b))))
#+END_SRC
** Part B
Write a product procedure that generates an iterative process. 
#+BEGIN_SRC racket -n
(define (product-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a)
              (* result
                 (term a)))))
  (iter a 1))
#+END_SRC
* Exercise 1.30
We're asked to rewrite ~sum~ iteratively.
#+BEGIN_SRC racket -n
(define (sum2 term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a)
              (+ result
                 (term a)))))
  (iter a 0))
#+END_SRC
* Exercise 1.32
** Part A
Show that ~sum~ and ~product~ are both special cases of a still more general notion called ~accumulate~. 
#+BEGIN_SRC racket -n
(define (accumulate combiner
                    null-value
                    term
                    a
                    next
                    b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))

; sum in terms of accumulate
(define (accumulateAsSum term a next b)
  (accumulate + 0 term a next b))

; product in terms of accumulate
(define (accumulateAsProduct term a next b)
  (accumulate * 1 term a next b))
#+END_SRC
** Part B
#+BEGIN_SRC racket -n
; accumulate as iterative process, not recursive
(define (accumulate-iter combiner
                         null-value
                         term
                         a
                         next
                         b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a)
              (combiner result
                        (term a)))))
  (iter a null-value))
#+END_SRC
* Exercise 1.33
Here we write an even more general process called ~filtered-accumulate~:
#+BEGIN_SRC racket -n
(define (filtered-accumulate combiner
                             null-value
                             term
                             a
                             next
                             b
                             condition)
  (if (> a b)
      null-value
      (combiner (if (condition a) (term a) null-value)
                (filtered-accumulate combiner
                                     null-value
                                     term
                                     (next a)
                                     next
                                     b
                                     condition))))
#+END_SRC
** Part A
#+BEGIN_SRC racket -n
; express sum of squares of primes in interval [a, b]
(define (sum-of-squares a b)
  (filtered-accumulate +
                       0
                       identity
                       a
                       inc
                       b
                       prime?))
#+END_SRC
** Part B
#+BEGIN_SRC racket -n
; sum of all positive integers i < n such that GCD(i,n) = 1
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (ex1.33b n)
  (define (coprime? i)
    ((= gcd i n) 1))
  (filtered-accumulate + 0 identity 0 inc n coprime?))
#+END_SRC
