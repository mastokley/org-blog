#+HTML_HEAD: <link href="../css/solarized-dark.css" rel="stylesheet" />
#+HTML_LINK_HOME: ../../index.html
#+TITLE: SICP Section 1.2.4
* Exercise 1.16
#+BEGIN_SRC racket -n
(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))

(define (expt2 b n) (expt-iter b n 1))

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
                 (- counter 1)
                 (* b product))))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define (even? n) (= (remainder n 2) 0))

(define (square n) (* n n))

(define (ssExpt b n)
  (define (ssExptIter base product currentPower remainderPower)
    (cond ((= remainderPower 1)
           product)
          ((= remainderPower 0)
           1)
          ((< (* currentPower 2)
              (+ currentPower remainderPower))
           (ssExptIter base
                       (* product product)
                       (* currentPower 2)
                       (- remainderPower currentPower)))
          (else
           (ssExptIter base
                       (* base product)
                       (+ currentPower 1)
                       (- remainderPower 1)))))
  (ssExptIter b b 1 n))
#+END_SRC
* Exercise 1.17
#+BEGIN_SRC racket -n
; exponentiaton as repeated multiplication
; using successive squares
(define (fast-expt b n)
  (define (even? n) (= 0 (remainder n 2)))
  (define (square n) (* n n))
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

; multiplication as repeated addition
; using repeated doubling/halving
(define (fast-* x y)
  (define (even? x) (= 0 (remainder x 2)))
  (define (double x) (+ x x))
  (define (halve x)
    (cond ((even? x)
           (/ x 2))
          (else (display "error"))))
  (cond ((= y 0) 0)
        ((= y 1) x)
        ((even? y) (double (fast-* x
                                   (halve y))))
        (else (+ x (fast-* x (- y 1))))))

#|
5 x 4 => 5 + 5 + 5 + 5 => double (5) + double (5) => double (double 5)
if y is even, double x and halve y
if y is odd, add x to running total and decrement y
5 x 4 > (double 5) 2 > (double (double 5))
5 x 4 > 5*2 * 4/2 > 5
5 x 3 > double(5) + 5
|#
#+END_SRC
* Exercise 1.18
#+BEGIN_SRC racket -n
(define (russianPeasantMethod x y)
  (define (even? x) (= 0 (remainder x 2)))
  (define (double x) (+ x x))
  (define (halve x) (/ x 2))
  (define (iter x y runningTotal)
    (if (> x 1)
        (iter (truncate (halve x))
              (double y)
              (if (not (even? x))
                  (+ y runningTotal)
                  runningTotal))
        (if (not (even? x))
            (+ y runningTotal)
            runningTotal)))
  (iter x y 0))
#+END_SRC
Nested ~if~ ought to be flat ~cond~.
Internal definitions ought to be ~let~.
* Exercise 1.19
#+BEGIN_SRC racket -n
(define (fib n) (fibIter 1 0 0 1 n))
(define (fibIter a b p q count)
  (cond ((= count 0)
         b)
        ((even? count)
         (fibIter a
                  b
                  (+ (* p p) (* q q))
                  (+ (* 2 p q) (* q q))
                  (/ count 2)))
        (else (fibIter (+ (* b q) (* a q)
                          (* a p)) (+ (* b p) (* a q))
                          p
                          q
                          (- count 1)))))
#+END_SRC
