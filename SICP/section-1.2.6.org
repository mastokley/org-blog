#+HTML_HEAD: <link href="../../css/solarized-dark.css" rel="stylesheet" />
#+HTML_LINK_HOME: ../../index.html
#+TITLE: SICP Section 1.2.6
* Exercise 1.22
2015-07-09
#+BEGIN_SRC racket -n            
(define (search-for-primes start-range end-range)
  (if (even? start-range)
      (search-for-primes (+ 1 start-range) end-range)
      (cond ((< start-range end-range) (timed-prime-test start-range)
             (search-for-primes (+ 2 start-range) end-range)))))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (current-inexact-milliseconds)))

(define (start-prime-test n start-time)
  (cond ((prime? n)
         (report-prime (- (current-inexact-milliseconds) start-time)))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
#+END_SRC
* Exercise 1.23
2015-08-10

From the book:

#+BEGIN_QUOTE
To implement this change, define a procedure ~next~ that returns 3 if its input is equal to 2 and otherwise returns its input plus 2. 
#+END_QUOTE

#+BEGIN_SRC racket -n
(define (next n)
  (cond ((= 2 n) 3)
        (else (+ n 2))))
#+END_SRC
        
#+BEGIN_QUOTE
...Modify the ~smallest-divisor~ procedure to use ~(next test-divisor)~ instead of ~(+ test-divisor 1)~. 
#+END_QUOTE

#+BEGIN_SRC racket -n
(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
#+END_SRC

#+BEGIN_QUOTE
...With ~timed-prime-test~ incorporating this modified version of ~smallest-divisor~, run the test for each of the 12 primes found in exercise 1.22. 
#+END_QUOTE

#+BEGIN_SRC racket -n
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (current-inexact-milliseconds)))

(define (start-prime-test n start-time)
  (cond ((prime? n)
    (report-prime (- (current-inexact-milliseconds) start-time)))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

; output
;
; prime         time elapsed    predicted time
; ---------------------------------------------
; 1009          0.0078125000   
; 1013          0.0080566406   
; 1019          0.0070800781   
;
; 10007         0.0139160156    0.02470529422   
; 10009         0.0141601562    0.02547733466   
; 10037         0.0141601562    0.02238917288   
;
; 100003        0.0458984375    0.04400630532   
; 100019        0.0439453125    0.04477834577   
; 100043        0.0439453125    0.04477834577   
;
; 1000003       0.1369628906    0.14514360354   
; 1000033       0.1359863281    0.13896727998   
; 1000037       0.1350097656    0.13896727998   
#+END_SRC
* Exercise 1.24
2015-08-10

#+BEGIN_SRC racket -n
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (current-inexact-milliseconds)))

(define (start-prime-test n start-time)
  (cond ((fast-prime? n 100)
         (report-prime (- (current-inexact-milliseconds) start-time)))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
#+END_SRC

* Exercise 1.27
2015-07-10
#+BEGIN_SRC racket -n
(define (expmod base exp m)
  (cond ((= exp 0)
         1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))

(define (square n) (* n n))

(define (Carmichael-number? n)
  (define (test n a)
    ; (newline)
    ; (display a)
    (cond ((= (+ a 1) n)
           (display " -- Success")))
    (cond ((and (= (expmod a n n) (remainder a n))
                (< (+ a 1) n))
           (test n (+ a 1)))))
  (test n 1))
#+END_SRC

* Exercise 1.28
2015-07-15

From the book (excerpted):

#+BEGIN_QUOTE
...Modify the ~expmod~ procedure to signal if it discovers a nontrivial square root of 1, and use this to implement the Miller-Rabin test with a procedure analogous to ~fermat-test~. 
#+END_QUOTE

#+BEGIN_SRC racket -n
(define (expmod base exp m)
  (cond ((= exp 0)
         1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))

(define (square n) (* n n))

(define (nontrivial-square-root? a n)
  (and (not (or (= a 1)
                (= a (- n 1))))
       (= (square a) (remainder 1 n))))

(define (congruent-modulo-n x y n)
  (= (remainder x n) (remainder y n)))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define (even? n) (= (remainder n 2) 0))

(define (square-check x m)
  (if (and (not (or (= x 1)
                    (= x (- m 1))))
           (= (remainder (* x x) m) 1))
      0
      (remainder (* x x) m)))
#+END_SRC
