#+HTML_LINK_UP: ../../index.html
#+HTML_LINK_HOME: ../../index.html
#+TITLE: SICP Section 2.2.2
* Exercise 2.24
#+BEGIN_SRC racket
; interpreter prints:
; '(1 (2 (3 4)))
#+END_SRC
* Exercise 2.25
#+BEGIN_SRC racket
(let ([list1 (list 1 3 (list 5 7) 9)]
      [list2 (list (list 7))]
      [list3 (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7))))))])
  (car (cdr (car (cdr (cdr list1)))))
  (car (car list2))
  (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr list3)))))))))))))
#+END_SRC
* Exercise 2.26
My predictions:

(1 2 3 4 5 6)

((1 2 3) 4 5 6)

((1 2 3) (4 5 6))
* Exercise 2.27
#+BEGIN_SRC racket
(define (reverse l)
  (if (null? l)
      l
      (append (reverse (cdr l)) (list (car l)))))

(define (flat-list? l)
  (or (not (list? l))
      (null? l)
      (and (not (pair? (car l)))
           (flat-list? (cdr l)))))

(define (deep-reverse l)
  (cond ((not (pair? l)) l)
        ((flat-list? l) (reverse l))
        (else (append (deep-reverse (cdr l))
                      (list (deep-reverse (car l)))))))
#+END_SRC
* Exercise 2.28
#+BEGIN_SRC racket
(define (fringe l)
  (cond ((not (list? l)) (list l))
        ((flat-list? l) l)
        (else (append (fringe (car l)) (fringe (cdr l))))))
#+END_SRC
* Exercise 2.29
#+BEGIN_SRC racket
; constructors given
(define (make-mobile left right) (list left right))
(define (make-branch length structure) (list length structure))
#+END_SRC
** Part A
#+BEGIN_SRC racket
; since mobiles and branches are more like pairs than lists, must use cadr
(define (left-branch mobile) (car mobile))
(define (right-branch mobile) (cadr mobile))
(define (branch-length branch) (car branch))
(define (branch-structure branch) (cadr branch))
#+END_SRC
** Part B
#+BEGIN_SRC racket
#|
solved via function decomposition (branch?, mobile? predicates)

when navigating a tree you must first cut it up (left-branch, right-branch)
and then determine which piece of the tree you have

book defines this as constructors and selectors, but i'm finding it helpful
to have predicates as well
|#

(define (branch? branch)
  (and (not (pair? (branch-length branch)))
       (pair? branch)))
(define (mobile? mobile)
  (and (pair? mobile)
       (pair? (left-branch mobile))
       (pair? (right-branch mobile))))
(define (total-weight mobile)
  (cond ((null? mobile)
         0)
        ((and (branch? mobile)
              (not (mobile? (branch-structure mobile))))
         (branch-structure mobile))
        ((and (branch? mobile)
              (mobile? (branch-structure mobile)))
         (total-weight (branch-structure mobile)))
        ((mobile? mobile)
         (+ (total-weight (left-branch mobile))
            (total-weight (right-branch mobile))))))
#+END_SRC
** Part C
Couple thoughts on this one... could not progress without\\
a) diagramming 'mobile' data structures as trees;\\
b) defining ~mobile?~ and ~branch?~ predicates;\\
c) thinking through how to id which part of the tree the function is dealing with at any given time\\

Also, that last consequent (~#t~) in the ~cond~ seems clumsy. It's trying to test whether the submobiles are balanced, but what if the original has no submobiles? Maybe ~#t~ is the equivalent of returning 0 if ~null~ on ~total-weight~ function.
#+BEGIN_SRC racket
(define (torque branch)
  (* (branch-length branch)
     (total-weight branch)))
(define (balanced? mobile)
  (cond ((mobile? mobile)
         (and (= (torque (left-branch mobile))
                 (torque (right-branch mobile)))
              (balanced? (left-branch mobile))
              (balanced? (right-branch mobile))))
        ((and (branch? mobile)
              (mobile? (branch-structure mobile)))
         (balanced? (branch-structure mobile)))
        ((and (branch? mobile)
              (not (mobile? (branch-structure mobile))))
         #t)))
#+END_SRC
** Part D
Suppose we change the representation of mobiles from ~list~ to ~cons~, like this:
#+BEGIN_SRC racket
(define (make-mobile-2 left right)
  (cons left right))
(define (make-branch-2 length structure)
  (cons length structure))
#+END_SRC
How would that affect the other functions?\\

I'd need to change the ~right-branch~ selector to use ~cdr~ instead of ~cadr~:
#+BEGIN_SRC racket
(define (right-branch-2 mobile) (cdr mobile))
#+END_SRC
Likewise with the ~branch-structure~ selector:
#+BEGIN_SRC racket
(define (branch-structure-2 branch) (cdr branch))
#+END_SRC
But that's it! ~total-weight~ and ~balanced?~ are safely beyond the abstraction barrier.
* Exercise 2.30
#+BEGIN_SRC racket
; this version defined directly
(define (square-tree-1 tree)
  (cond ((null? tree)
         null)
        ((not (pair? tree))
         (* tree tree))
        (else
         (cons (square-tree-1 (car tree))
               (square-tree-1 (cdr tree))))))

; this version defined with higher-order function map
(define (square-tree-2 tree)
  (map (λ (sub-tree)
         (if (pair? sub-tree)
             (square-tree-2 sub-tree)
             (* sub-tree sub-tree)))
       tree))
#+END_SRC
* Exercise 2.31
#+BEGIN_SRC racket
; so what this does... is... for each element in list
; if element is a pair (i. e. a sub list), it applies tree map to it
; otherwise, it acts as a simple map function
(define (tree-map function tree)
  (map (λ (sub-tree)
         (if (pair? sub-tree)
             (tree-map function sub-tree)
             (function sub-tree)))
       tree))
#+END_SRC
