#+HTML_LINK_UP: ../../index.html
#+HTML_LINK_HOME: ../../index.html
#+TITLE: SICP Section 1.2.2
* Exercise 1.11
#+BEGIN_SRC racket
(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1))
         (* 2 (f (- n 2)))
         (* 3 (f (- n 3))))))

(define (f-tail-recur n)
  (define (f-iter n0 n1 n2 counter)
    (when (< counter n)
      (display n0)
      (newline)
      (f-iter n1
              n2
              (+ (* 3 n0)
                 (* 2 n1)
                 n2)
              (+ 1 counter))))
  (f-iter 0 1 2 0))
   
; print f
(define (f-print start finish)
  (when (< start finish)
    (display (f start))
    (newline)
    (f-print (+ 1 start) finish)))
#+END_SRC

* Exercise 1.12
#+BEGIN_SRC racket
(define (pascalCell r c)
  (cond ((= r 1) 1)
        ((= c 1) 1)
        ((= r c) 1)
        (else (+ (pascalCell (- r 1) (- c 1))
                 (pascalCell (- r 1) c)))))
#+END_SRC
